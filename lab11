import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RGB Selector',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  double _red = 0.0;
  double _green = 0.0;
  double _blue = 0.0;

  Color get currentColor =>
      Color.fromARGB(255, _red.toInt(), _green.toInt(), _blue.toInt());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          Container(
            height: 80,
            color: const Color(0xFFB39DDB), 
            child: const Center(
              child: Text(
                'RGB Selector',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          const SizedBox(height: 10),
          Center(
            child: PreviewContainer(
              currentColor: currentColor,
            ),
          ),
          const SizedBox(height: 20),
          SliderSection(
            redValue: _red,
            greenValue: _green,
            blueValue: _blue,
            onRedChanged: (value) {
              setState(() {
                _red = value;
              });
            },
            onGreenChanged: (value) {
              setState(() {
                _green = value;
              });
            },
            onBlueChanged: (value) {
              setState(() {
                _blue = value;
              });
            },
          ),
        ],
      ),
    );
  }
}

class SliderSection extends StatelessWidget {
  final double redValue;
  final double greenValue;
  final double blueValue;
  final ValueChanged<double> onRedChanged;
  final ValueChanged<double> onGreenChanged;
  final ValueChanged<double> onBlueChanged;

  const SliderSection({
    Key? key,
    required this.redValue,
    required this.greenValue,
    required this.blueValue,
    required this.onRedChanged,
    required this.onGreenChanged,
    required this.onBlueChanged,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        SliderRow(
          title: "Red",
          value: redValue,
          activeColor: Colors.red,
          onChanged: onRedChanged,
        ),
        const SizedBox(height: 10),
        SliderRow(
          title: "Green",
          value: greenValue,
          activeColor: Colors.green,
          onChanged: onGreenChanged,
        ),
        const SizedBox(height: 10),
        SliderRow(
          title: "Blue",
          value: blueValue,
          activeColor: Colors.blue,
          onChanged: onBlueChanged,
        ),
      ],
    );
  }
}

class SliderRow extends StatelessWidget {
  final String title;
  final double value;
  final Color activeColor;
  final ValueChanged<double> onChanged;

  const SliderRow({
    Key? key,
    required this.title,
    required this.value,
    required this.activeColor,
    required this.onChanged,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(
          "$title: ${value.toInt()}",
          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
        ),
        Slider(
          value: value,
          min: 0,
          max: 255,
          activeColor: activeColor,
          onChanged: onChanged,
        ),
      ],
    );
  }
}

class PreviewContainer extends StatelessWidget {
  final Color currentColor;

  const PreviewContainer({Key? key, required this.currentColor}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 150,
      height: 150,
      decoration: BoxDecoration(
        color: currentColor,
        borderRadius: BorderRadius.circular(8),
        boxShadow: const [
          BoxShadow(
            color: Colors.black26,
            offset: Offset(2, 2),
            blurRadius: 5,
          ),
        ],
      ),
    );
  }
}
